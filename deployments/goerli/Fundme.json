{
  "address": "0xe66AEc217CBef290F3cbFe74bc2659Cf8AdE3474",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToMoney",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miniumUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricefeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45d01e835de13c266d01af604c1b96bb8a0f9f8a843eea0566df4b07a182521b",
  "receipt": {
    "to": null,
    "from": "0xD258f3f92C5dcD0AA69cB572c1705aBbCf1231f4",
    "contractAddress": "0xe66AEc217CBef290F3cbFe74bc2659Cf8AdE3474",
    "transactionIndex": 10,
    "gasUsed": "926530",
    "logsBloom": "0x
    "blockHash": "0x067a6ff2581b8c8667043d14e0057adcb78881b74e1a60927fb8b917f011296a",
    "transactionHash": "0x45d01e835de13c266d01af604c1b96bb8a0f9f8a843eea0566df4b07a182521b",
    "logs": [],
    "blockNumber": 7651655,
    "cumulativeGasUsed": "1461375",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "084ca66d2a186d9edbc0e2d51f1f30df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniumUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricefeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundme.sol\":\"Fundme\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/Fundme.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n// import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n \\n//  instead of copy pasting the whole interface as shown below we cn directly import it from gitHub and npm package\\n// @chainlink/contracts refer to npm package\\n\\n// interface AggregatorV3Interface {\\n//   function decimals() external view returns (uint8);\\n\\n//   function description() external view returns (string memory);\\n\\n//   function version() external view returns (uint256);\\n\\n//   function getRoundData(uint80 _roundId)\\n//     external\\n//     view\\n//     returns (\\n//       uint80 roundId,\\n//       int256 answer,\\n//       uint256 startedAt,\\n//       uint256 updatedAt,\\n//       uint80 answeredInRound\\n//     );\\n\\n//   function latestRoundData()\\n//     external\\n//     view\\n//     returns (\\n//       uint80 roundId,\\n//       int256 answer,\\n//       uint256 startedAt,\\n//       uint256 updatedAt,\\n//       uint80 answeredInRound\\n//     );\\n// }\\n\\n\\n// get fund ffronm user;\\n// set a minium fund limit in usd\\n// withdraw funds;\\nimport 'contracts/PriceConverter.sol';\\ncontract Fundme{\\n    using PriceConverter for uint256;\\n    // contract adressses can ghold fund asa wallet can\\n    // to know hw much value  someone is sending we use msg.value;\\n    \\n    uint256 public miniumUSD=50*1e18;\\n    address public owner;\\n\\n// constructor is a function that gets immediatly a called when a function is deployed\\n// while ther function are created not called when we deploy ..we have to call them separately after deployment and if thery are not pure or view we transact them\\n// here using constructor for initialisation we aare not required call the transaction many times;\\n\\n\\n\\n// refactorin gour codxefor mocking purposes\\n// in the constructor we can actually pass thepricecfeedaddress as a parameter\\n// as the pricefeed is now a parameterwe can change it as weswitch networks\\n\\nAggregatorV3Interface public  pricefeed;\\nconstructor(address priceFeedAddress){\\nowner=msg.sender;\\npricefeed= AggregatorV3Interface(priceFeedAddress);\\n}\\n\\n\\n/* as we parameterize th epricefeed now we can pass it to functions similarly as \\nasw are using a library priceconverter on uint ..we can pass price feed as aparameter as well to therese library fuction like to\\ngetConversionRate()*/\\n\\n\\n\\n\\n\\n// array to keep atrack of all those sending ney to the smart contract\\nmapping(address=>uint) public addressToMoney;\\naddress[] public funders;\\n\\nfunction fund() public payable{\\n     require(msg.value.getConvertCurrency(pricefeed) >= miniumUSD,\\\"Not sufficient funds send\\\");\\n     funders.push(msg.sender);\\n     addressToMoney[msg.sender]=msg.value;\\n    \\n    //  require staement reverts a transaction \\n    // reverting means undo any action done before and send the remaing gas back\\n    // gas will bespent but unsed gas will be reverted bsck to the account\\n\\n    // now we need to conver tour ether toreal world currency si=o that they are actually applicable to the real world\\n}\\n\\n\\n\\n\\n// MODIFIERS\\n// require(msg.sender==owner,\\\"Only owner can withdraw\\\");\\n// SUPPOSE we need this require condition checkin many function then we have to copy paste it many times\\n// instead we usee modifiers;\\n// so inside the modifier we set the functionality and add the modifier name at the end of function name;\\n// _; implies first execute the require statement and then rest of the code inside the function on which it has been applied;\\n// hence by applying mdifiers we change the functionalitiesof the function\\n\\nmodifier onlyOwner{\\n    require(msg.sender==owner,\\\"Only owner can withdraw\\\");\\n    _;\\n}\\n\\n\\n\\nfunction withdraw()public onlyOwner{\\nrequire(msg.sender==owner,\\\"Only owner can withdraw\\\");\\n// updating the mapping of funder\\naddress withDrawingFunder= msg.sender;\\n\\nfor(uint256 funderNum=0;funderNum < funders.length;funderNum++){\\n\\n    addressToMoney[withDrawingFunder]=0;\\n}\\n// resetting the funders array\\n// in parenthesise we put the no of values with which wee want to initialise our array with\\n// here it is 0 as we are initialising a blank array\\nfunders= new address[](0);\\n\\n// 3 WAYS TO ACEESS BALANCE FROM A CONTRACT\\n// transfer\\n// call\\n// send\\n\\n// retreiving balance from a contract using this;\\n// payable(msg.sender).transfer(address(this).balance);\\n// this refers to address of this entire contract\\n// disadvantages==> transfer function is cappedd at 2300 gas and if more gas is used it throws an error;\\n// if more gas  is used it throws an error; and revert the transaction\\n\\n\\n// using send==> it is also capped at 2300 gas but will not throw an eror instead will return a bool\\n  bool isSuccess=payable(msg.sender).send(address(this).balance);\\n  require( isSuccess,\\\"Transaction not sent\\\");\\n// hereas the transaction will not revert we will add the failure condition for send\\n\\n\\n// usibg call\\n// it is very powerful tool and is lower level function\\n// we can use it to call any ethrium function on blockChain without even needing its abi;\\n// here we atre using it for transcation and hem ce acan pass this.balance\\n// ehen a function returns two parameters we can get it as shown\\n//  it retrurns a bool and bytes data array to store the values returned by functions callled by it\\n// bool is true if the function as successfully called\\n// since we are not calling any function we use \\\"\\\"\\n// (bool callSuccess, byts memory datareturned)= payable(msg.sender).call{value:address(this).balance}(\\\"\\\");\\n(bool callSuccess,)= payable(msg.sender).call{value:address(this).balance}(\\\"\\\");\\n  require( callSuccess,\\\"Transaction not sent\\\");\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\n// INSTEAD OF AGAIN EXPLICITLY CREATING THESE FUNCTIONS WE WILL BE IMPORTING THE LIBRARY WE CRATED\\n\\n\\n//  function getPrice()public view returns (uint){\\n//      AggregatorV3Interface pricefeed= AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n//      (,int price,,,)=pricefeed.latestRoundData();\\n//     //  adjusting the decimal plaves with ether;\\n//      return uint(price*1e10);\\n\\n\\n// //    here will be importing the chainlink smart contract to get our usd price  but to do so we need\\n// // ABI:is just info abouut the set of functions and methhods we can called to use etherium\\n// // we can get abi by importing the whole contract but in that case we may unnecessaryly import lot of code \\n// // hence we use interface knowing what function of te contract we can interct with\\n\\n\\n// // address of the contact ==> obained from chainLInk io;0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n\\n//  }\\n// // we dont use decimals in solidity so that we dont loose the precision\\n\\n// // fiunction to convert usd to ether{\\n\\n//     function getConvertCurrency(uint _usdAmount) public view returns(uint ){\\n//         uint etherPrice=getPrice();\\n//         uint convertedToEther= (_usdAmount*etherPrice)/1e18;\\n//         return convertedToEther;\\n\\n\\n\\n//     }\\n\\n\\n\\n// function getVersion()public view returns (uint256){\\n// // hence we can interact with the contract sthat exist outside our project using interfaces which gets compiled down to abi and we combine it with address to caall a function\\n// AggregatorV3Interface pricefeed= AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n// return pricefeed.version();\\n// // it returns the version of the smart contract}\\n\\n// }\\n}\",\"keccak256\":\"0xb27a4df12b5fcbe79314890d3b82cf9cb258323976c40fb1cbc1742359f23f06\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// here we have to downlod hte npm of chain link oracle packad=ge in order to use it \\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nlibrary PriceConverter{\\r\\n\\r\\n// libraries can be used to a large extent to consolidate our code..\\r\\n// we will be exporting this library to our smart contract\\r\\n// we can apply library functions to any of our predefined data types or user defined data types\\r\\n// eg using PriceConverter for uint ====> we are applying the library functions to uint;\\r\\n// so now we can trat uint as an object and then use these function as methods of the function\\r\\n//  eg msg.sender.getConversionRate()\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n   \\r\\n    \\r\\nfunction getPrice( AggregatorV3Interface pricefeed)internal view returns (uint){\\r\\n    // no longer \\r\\n    //  AggregatorV3Interface pricefeed= AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n     (,int price,,,)=pricefeed.latestRoundData();\\r\\n    //  adjusting the decimal plaves with ether;\\r\\n     return uint(price*1e10);\\r\\n\\r\\n\\r\\n//    here will be importing the chainlink smart contract to get our usd price  but to do so we need\\r\\n// ABI:is just info abouut the set of functions and methhods we can called to use etherium\\r\\n// we can get abi by importing the whole contract but in that case we may unnecessaryly import lot of code \\r\\n// hence we use interface knowing what function of te contract we can interct with\\r\\n\\r\\n\\r\\n// address of the contact ==> obained from chainLInk io;0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n\\r\\n }\\r\\n// we dont use decimals in solidity so that we dont loose the precision\\r\\n\\r\\n// fiunction to convert usd to ether{\\r\\n\\r\\n    function getConvertCurrency(uint _usdAmount, AggregatorV3Interface priceFeed) internal view returns(uint ){\\r\\n        uint etherPrice=getPrice(priceFeed);\\r\\n        uint convertedToEther= (_usdAmount*etherPrice)/1e18;\\r\\n        return convertedToEther;\\r\\n\\r\\n\\r\\n\\r\\n    }   \\r\\n\\r\\n\\r\\n\\r\\nfunction getVersion() internal view returns (uint256){\\r\\n// hence we can interact with the contract sthat exist outside our project using interfaces which gets compiled down to abi and we combine it with address to caall a function\\r\\nAggregatorV3Interface pricefeed= AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\nreturn pricefeed.version();\\r\\n// it returns the version of the smart contract}\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n}\",\"keccak256\":\"0xef67027db74da74920ff084208555d727bc6975ce62c09bca1b30177621f9d51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526802b5e3af16b188000060005534801561001d57600080fd5b50604051610ff0380380610ff0833981810160405281019061003f91906100dc565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014e565b6000815190506100d681610137565b92915050565b6000602082840312156100ee57600080fd5b60006100fc848285016100c7565b91505092915050565b600061011082610117565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61014081610105565b811461014b57600080fd5b50565b610e938061015d6000396000f3fe6080604052600436106100705760003560e01c8063a438dfed1161004e578063a438dfed146100e2578063b6002d341461011f578063b60d42881461014a578063dc0d3dff1461015457610070565b80633ccfd60b14610075578063590f21131461008c5780638da5cb5b146100b7575b600080fd5b34801561008157600080fd5b5061008a610191565b005b34801561009857600080fd5b506100a16104cf565b6040516100ae9190610a86565b60405180910390f35b3480156100c357600080fd5b506100cc6104f5565b6040516100d99190610a6b565b60405180910390f35b3480156100ee57600080fd5b5061010960048036038101906101049190610886565b61051b565b6040516101169190610b01565b60405180910390f35b34801561012b57600080fd5b50610134610533565b6040516101419190610b01565b60405180910390f35b610152610539565b005b34801561016057600080fd5b5061017b600480360381019061017691906108af565b61065b565b6040516101889190610a6b565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021890610ae1565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a890610ae1565b60405180910390fd5b600033905060005b60048054905081101561031e576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061031690610d5a565b9150506102b9565b50600067ffffffffffffffff811115610360577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561038e5781602001602082028036833780820191505090505b50600490805190602001906103a4929190610776565b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610aa1565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161044490610a56565b60006040518083038185875af1925050503d8060008114610481576040519150601f19603f3d011682016040523d82523d6000602084013e610486565b606091505b50509050806104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190610aa1565b60405180910390fd5b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b60005481565b600054610571600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461069a90919063ffffffff16565b10156105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990610ac1565b60405180910390fd5b6004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6004818154811061066b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106a6836106d6565b90506000670de0b6b3a764000082866106bf9190610c80565b6106c99190610b38565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075791906108d8565b5050509150506402540be4008161076e9190610b69565b915050919050565b8280548282559060005260206000209081019282156107ef579160200282015b828111156107ee5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610796565b5b5090506107fc9190610800565b5090565b5b80821115610819576000816000905550600101610801565b5090565b60008135905061082c81610e01565b92915050565b60008151905061084181610e18565b92915050565b60008135905061085681610e2f565b92915050565b60008151905061086b81610e2f565b92915050565b60008151905061088081610e46565b92915050565b60006020828403121561089857600080fd5b60006108a68482850161081d565b91505092915050565b6000602082840312156108c157600080fd5b60006108cf84828501610847565b91505092915050565b600080600080600060a086880312156108f057600080fd5b60006108fe88828901610871565b955050602061090f88828901610832565b94505060406109208882890161085c565b93505060606109318882890161085c565b925050608061094288828901610871565b9150509295509295909350565b61095881610cda565b82525050565b61096781610d36565b82525050565b600061097a601483610b27565b91507f5472616e73616374696f6e206e6f742073656e740000000000000000000000006000830152602082019050919050565b60006109ba601983610b27565b91507f4e6f742073756666696369656e742066756e64732073656e64000000000000006000830152602082019050919050565b60006109fa601783610b27565b91507f4f6e6c79206f776e65722063616e2077697468647261770000000000000000006000830152602082019050919050565b6000610a3a600083610b1c565b9150600082019050919050565b610a5081610d16565b82525050565b6000610a6182610a2d565b9150819050919050565b6000602082019050610a80600083018461094f565b92915050565b6000602082019050610a9b600083018461095e565b92915050565b60006020820190508181036000830152610aba8161096d565b9050919050565b60006020820190508181036000830152610ada816109ad565b9050919050565b60006020820190508181036000830152610afa816109ed565b9050919050565b6000602082019050610b166000830184610a47565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610b4382610d16565b9150610b4e83610d16565b925082610b5e57610b5d610dd2565b5b828204905092915050565b6000610b7482610cec565b9150610b7f83610cec565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610bbe57610bbd610da3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610bfb57610bfa610da3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610c3857610c37610da3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610c7557610c74610da3565b5b828202905092915050565b6000610c8b82610d16565b9150610c9683610d16565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ccf57610cce610da3565b5b828202905092915050565b6000610ce582610cf6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610d4182610d48565b9050919050565b6000610d5382610cf6565b9050919050565b6000610d6582610d16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9857610d97610da3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610e0a81610cda565b8114610e1557600080fd5b50565b610e2181610cec565b8114610e2c57600080fd5b50565b610e3881610d16565b8114610e4357600080fd5b50565b610e4f81610d20565b8114610e5a57600080fd5b5056fea2646970667358221220187ae0e7fe40baa0d494ebf31155686151425b2a4a10960634aec78bb63a7cb264736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063a438dfed1161004e578063a438dfed146100e2578063b6002d341461011f578063b60d42881461014a578063dc0d3dff1461015457610070565b80633ccfd60b14610075578063590f21131461008c5780638da5cb5b146100b7575b600080fd5b34801561008157600080fd5b5061008a610191565b005b34801561009857600080fd5b506100a16104cf565b6040516100ae9190610a86565b60405180910390f35b3480156100c357600080fd5b506100cc6104f5565b6040516100d99190610a6b565b60405180910390f35b3480156100ee57600080fd5b5061010960048036038101906101049190610886565b61051b565b6040516101169190610b01565b60405180910390f35b34801561012b57600080fd5b50610134610533565b6040516101419190610b01565b60405180910390f35b610152610539565b005b34801561016057600080fd5b5061017b600480360381019061017691906108af565b61065b565b6040516101889190610a6b565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021890610ae1565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a890610ae1565b60405180910390fd5b600033905060005b60048054905081101561031e576000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061031690610d5a565b9150506102b9565b50600067ffffffffffffffff811115610360577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561038e5781602001602082028036833780820191505090505b50600490805190602001906103a4929190610776565b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610aa1565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161044490610a56565b60006040518083038185875af1925050503d8060008114610481576040519150601f19603f3d011682016040523d82523d6000602084013e610486565b606091505b50509050806104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190610aa1565b60405180910390fd5b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b60005481565b600054610571600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461069a90919063ffffffff16565b10156105b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a990610ac1565b60405180910390fd5b6004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6004818154811061066b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106a6836106d6565b90506000670de0b6b3a764000082866106bf9190610c80565b6106c99190610b38565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561071f57600080fd5b505afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075791906108d8565b5050509150506402540be4008161076e9190610b69565b915050919050565b8280548282559060005260206000209081019282156107ef579160200282015b828111156107ee5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610796565b5b5090506107fc9190610800565b5090565b5b80821115610819576000816000905550600101610801565b5090565b60008135905061082c81610e01565b92915050565b60008151905061084181610e18565b92915050565b60008135905061085681610e2f565b92915050565b60008151905061086b81610e2f565b92915050565b60008151905061088081610e46565b92915050565b60006020828403121561089857600080fd5b60006108a68482850161081d565b91505092915050565b6000602082840312156108c157600080fd5b60006108cf84828501610847565b91505092915050565b600080600080600060a086880312156108f057600080fd5b60006108fe88828901610871565b955050602061090f88828901610832565b94505060406109208882890161085c565b93505060606109318882890161085c565b925050608061094288828901610871565b9150509295509295909350565b61095881610cda565b82525050565b61096781610d36565b82525050565b600061097a601483610b27565b91507f5472616e73616374696f6e206e6f742073656e740000000000000000000000006000830152602082019050919050565b60006109ba601983610b27565b91507f4e6f742073756666696369656e742066756e64732073656e64000000000000006000830152602082019050919050565b60006109fa601783610b27565b91507f4f6e6c79206f776e65722063616e2077697468647261770000000000000000006000830152602082019050919050565b6000610a3a600083610b1c565b9150600082019050919050565b610a5081610d16565b82525050565b6000610a6182610a2d565b9150819050919050565b6000602082019050610a80600083018461094f565b92915050565b6000602082019050610a9b600083018461095e565b92915050565b60006020820190508181036000830152610aba8161096d565b9050919050565b60006020820190508181036000830152610ada816109ad565b9050919050565b60006020820190508181036000830152610afa816109ed565b9050919050565b6000602082019050610b166000830184610a47565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610b4382610d16565b9150610b4e83610d16565b925082610b5e57610b5d610dd2565b5b828204905092915050565b6000610b7482610cec565b9150610b7f83610cec565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610bbe57610bbd610da3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610bfb57610bfa610da3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610c3857610c37610da3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610c7557610c74610da3565b5b828202905092915050565b6000610c8b82610d16565b9150610c9683610d16565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ccf57610cce610da3565b5b828202905092915050565b6000610ce582610cf6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610d4182610d48565b9050919050565b6000610d5382610cf6565b9050919050565b6000610d6582610d16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9857610d97610da3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610e0a81610cda565b8114610e1557600080fd5b50565b610e2181610cec565b8114610e2c57600080fd5b50565b610e3881610d16565b8114610e4357600080fd5b50565b610e4f81610d20565b8114610e5a57600080fd5b5056fea2646970667358221220187ae0e7fe40baa0d494ebf31155686151425b2a4a10960634aec78bb63a7cb264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "miniumUSD",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 58,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 61,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "pricefeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 82,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "addressToMoney",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 85,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "funders",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}