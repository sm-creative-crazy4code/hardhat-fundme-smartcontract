// here our contract is dependent on pricefeed contract but pricefeed contract as is generated by oracle(chainlink)
// can only exist for a live network
//hence via mocking we will be creating a local copy of our pricrfeed contract
const { network } = require("hardhat");
const {devChains,
  DECIMALS,
  PAYMENT_AMOUNT,
  _timeout,
  _minSubmissionValue,
   _maxSubmissionValue,
  _description,
   _link,
   _validator}= require("../helper-hardhat-config")
module.exports= async({getNamedAccounts, deployments})=>{
   
  const{deploy,log}=deployments;
  const {deployer}= await getNamedAccounts()
  const chainId= network.config.chainId


  // include is just a key word taht checks if some variable is inside array or not
  /*address _link,
    uint128 _paymentAmount,
    uint32 _timeout,
    address _validator,
    int256 _minSubmissionValue,
    int256 _maxSubmissionValue,
    uint8 _decimals,
    string memory _description*/

  if(devChains.includes(network.name)){

    console.log("Local network detected ....Deploying mocks..")

    const MockAggregatorv3= await deploy("MockV3Aggregator",{
      contract:"MockV3Aggregator",
      from:deployer,
      args:[ _link,PAYMENT_AMOUNT,_timeout,_validator,_minSubmissionValue,_maxSubmissionValue,DECIMALS,,_description],//=>pass the array of constructir argumrnts
      log:true//spit out the transaction details

    })







  }



  //  we willnow set a if else conditin as we donotwant to deploy this mock contract to mainnet or any live network
  // if the chain id is the same as that of our local host or hardhat network then only deploy our contract else donot ddeploy

}


module.exports.tags = ["all","mocks"]//=>. as our deploy 1 is  not completed so we to use module tags and only those scripts having tags will be executed
